1. Write a Python program to check if the given number is a Disarium Number?
def is_disarium(num):
    str_num = str(num)    
    disarium_sum = sum(int(digit) ** (index + 1) for index, digit in enumerate(str_num))
    return disarium_sum == num

if __name__ == "__main__":
    number = int(input("Enter a number: "))
    if is_disarium(number):
        print(f"{number} is a Disarium number.")
    else:
        print(f"{number} is not a Disarium number.")
2. Write a Python program to print all disarium numbers between 1 to 100?
def is_disarium(num):
    str_num = str(num)    
    disarium_sum = sum(int(digit) ** (index + 1) for index, digit in enumerate(str_num))
    return disarium_sum == num

if __name__ == "__main__":
    for number in range(1, 101):
        if is_disarium(number):
            print(f"{number} is a Disarium number.")
        else:
            print(f"{number} is not a Disarium number.")
3. Write a Python program to check if the given number is Happy Number?
class Solution(object):
    def isHappy(self, n:int)->bool:
        """
        :type n: int
        :rtype: bool
        """
        visit=set()
        while n not in visit:
            visit.add(n)
            n=self.sumOfSquares(n)
            if n==1:
                return True
        return False

    def sumOfSquares(self, n:int)->int:
        sum=0
        while n:
            digit=n%10
            sum+=digit**2
            n=n//10
        return sum
    
if __name__ == "__main__":
    n = int(input("Enter a number: "))
    solution = Solution()
    if solution.isHappy(n):
        print(f"{n} is a Happy Number.")
    else:
        print(f"{n} is not a Happy Number.")
4. Write a Python program to print all happy numbers between 1 and 100?
class Solution(object):
    def isHappy(self, n:int)->bool:
        """
        :type n: int
        :rtype: bool
        """
        visit=set()
        while n not in visit:
            visit.add(n)
            n=self.sumOfSquares(n)
            if n==1:
                return True
        return False

    def sumOfSquares(self, n:int)->int:
        sum=0
        while n:
            digit=n%10
            sum+=digit**2
            n=n//10
        return sum
    
if __name__ == "__main__":
    solution = Solution()
    for n in range(0,101):
        if solution.isHappy(n):
            print(f"{n} is a Happy Number.")
        else:
            print(f"{n} is not a Happy Number.")
5. Write a Python program to determine whether the given number is a Harshad Number?
class Solution(object):
    def is_harshad(self,num)->True:
        """
        :type num: int
        :rtype: bool
        """
        return self.calculate_harshad(num)
    
    def calculate_harshad(self, num:int)->bool:
        digit_sum = sum(int(digit) for digit in str(num))
        flag= num % digit_sum
        if flag == 0:
            return True
        else:
            return False
        
if __name__=="__main__":
    number = int(input("Enter a number: "))
    solution = Solution()
    if solution.is_harshad(number):
        print(f"{number} is a Harshad number.")
    else:
        print(f"{number} is not a Harshad number.")

6. Write a Python program to print all pronic numbers between 1 and 100?
class Solution(object):
    def is_prontic(self, num:int)->bool:
        """
        :type num: int
        :rtype: bool
        """
        return self.calculate_pronic(num)
    
    def calculate_pronic(self, num:int)->bool:
        for i in range(int(num**0.5) + 1):
            if i * (i + 1) == num:
                return True
        return False

if __name__ == "__main__":
    solution = Solution()
    for n in range(1, 101):
        if solution.is_prontic(n):
            print(f"{n} is a Pronic Number.")
        else:
            print(f"{n} is not a Pronic Number.")
